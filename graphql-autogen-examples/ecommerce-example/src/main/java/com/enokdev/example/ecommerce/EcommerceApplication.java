package com.enokdev.example.ecommerce;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * E-commerce example application demonstrating GraphQL AutoGen capabilities.
 * 
 * This example shows:
 * - Complex entity relationships
 * - DataLoaders for performance optimization
 * - Pagination with filtering and sorting
 * - Input types for mutations
 * - Interface and union types
 * - JavaDoc documentation extraction
 * 
 * @author GraphQL AutoGen Team
 * @since 1.0.0
 */
@SpringBootApplication
public class EcommerceApplication {

    public static void main(String[] args) {
        SpringApplication.run(EcommerceApplication.class, args);
        
        System.out.println("""
            üöÄ E-commerce GraphQL API is running!
            
            üìä GraphQL Playground: http://localhost:8080/graphiql
            üìã Schema endpoint: http://localhost:8080/graphql/schema
            üîç GraphQL endpoint: http://localhost:8080/graphql
            
            ‚ú® Features demonstrated:
            ‚Ä¢ Auto-generated schema from JPA entities
            ‚Ä¢ DataLoaders for N+1 query optimization
            ‚Ä¢ Relay-style cursor pagination
            ‚Ä¢ Input types for mutations
            ‚Ä¢ Interface and union types
            ‚Ä¢ JavaDoc descriptions
            
            üìö Example queries available in: /graphql/examples.graphql
            """);
    }
}
