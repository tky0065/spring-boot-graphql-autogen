# E-commerce example application configuration
spring:
  application:
    name: ecommerce-graphql-api
  
  # GraphQL AutoGen configuration
  graphql:
    autogen:
      enabled: true
      base-packages:
        - "com.enokdev.example.ecommerce.model"
        - "com.enokdev.example.ecommerce.dto"
        - "com.enokdev.example.ecommerce.controller"
      generate-inputs: true
      generate-data-loaders: true
      generate-pagination: true
      generate-interfaces: true
      generate-unions: true
      schema-location: "classpath:graphql/"
      naming-strategy: CAMEL_CASE
      include-java-doc: true
      validate-schema: true
      
  # Database configuration (H2 for demo)
  datasource:
    url: jdbc:h2:mem:ecommerce
    driverClassName: org.h2.Driver
    username: sa
    password: 
  
  h2:
    console:
      enabled: true
      path: /h2-console
  
  # JPA configuration
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  
  # GraphQL Spring Boot configuration
  graphql:
    graphiql:
      enabled: true
      path: /graphiql
    path: /graphql
    cors:
      allowed-origins: "*"
      allowed-methods: "*"

# Logging configuration
logging:
  level:
    com.enokdev.graphql.autogen: DEBUG
    com.enokdev.example.ecommerce: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Application info
info:
  app:
    name: "E-commerce GraphQL API"
    description: "Demonstration of GraphQL AutoGen capabilities"
    version: "1.0.0-SNAPSHOT"
    features:
      - "Auto-generated GraphQL schema"
      - "DataLoaders for performance"
      - "Cursor-based pagination"
      - "Input type generation"
      - "Interface and union types"
      - "JavaDoc documentation extraction"
