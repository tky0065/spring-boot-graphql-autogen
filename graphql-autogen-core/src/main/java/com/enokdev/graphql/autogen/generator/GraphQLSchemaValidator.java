package com.enokdev.graphql.autogen.generator;

import graphql.schema.GraphQLSchema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Validator for GraphQL schemas generated by the auto-generator.
 * 
 * <p>This class provides validation capabilities to ensure that generated
 * GraphQL schemas are valid and conform to GraphQL specifications.</p>
 * 
 * @author GraphQL AutoGen Team
 * @since 1.0.0
 */
public class GraphQLSchemaValidator {

    private static final Logger log = LoggerFactory.getLogger(GraphQLSchemaValidator.class);

    /**
     * Validates a GraphQL schema.
     * 
     * @param schema the GraphQL schema to validate
     * @return true if the schema is valid, false otherwise
     */
    public boolean validateSchema(GraphQLSchema schema) {
        log.debug("Validating GraphQL schema");
        
        if (schema == null) {
            log.warn("Schema is null - validation failed");
            return false;
        }
        
        try {
            // Basic validation - check if schema has query type
            if (schema.getQueryType() == null) {
                log.warn("Schema has no query type - validation failed");
                return false;
            }
            
            log.debug("Schema validation passed");
            return true;
            
        } catch (Exception e) {
            log.error("Schema validation failed with exception: {}", e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * Validates a GraphQL schema and throws an exception if validation fails.
     * 
     * @param schema the GraphQL schema to validate
     * @throws IllegalArgumentException if the schema is invalid
     */
    public void validateSchemaOrThrow(GraphQLSchema schema) {
        if (!validateSchema(schema)) {
            throw new IllegalArgumentException("GraphQL schema validation failed");
        }
    }
}
